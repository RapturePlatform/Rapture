import groovy.text.SimpleTemplateEngine

import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.bundling.Zip
import org.gradle.api.tasks.wrapper.Wrapper

plugins {
    id 'com.gradle.enterprise' version '3.16.2'
    id 'com.github.hierynomus.license' version '0.16.1'
}

gradleEnterprise {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

license {
    header file('./LICENSE')
}

group = 'net.rapture'

ext { platformVersion = '3.0.4' }

tasks.named('wrapper', Wrapper) {
    gradleVersion = '8.6'
    distributionType = Wrapper.DistributionType.BIN
}

subprojects {

    project.group = parent.group

    apply plugin: 'eclipse'
    apply plugin: 'java-library'
    apply plugin: 'application'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.hierynomus.license'

    license {
        header rootProject.file('LICENSE')
        excludes(["**/*.txt", "**/*.json", "**/*.xml"])
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/releases/"
        }
    }

    task copyProps(type:Copy) {
        from 'src/main/java'
        into 'build/classes/main'
        include '**/*.txt', '**/*.xml', '**/*.properties', '**/*.proto'
    }

    compileJava {options.encoding = "UTF-8" }
    compileTestJava {options.encoding = "UTF-8" }
    compileJava {
        dependsOn copyProps
    }

    test {
        include 'rapture/**'

        // set JVM arguments for the test JVM(s)
        jvmArgs '-noverify'
    }

    plugins.withType(ApplicationPlugin) {

        final RAPTURE_CONFIG_DIR = 'rapture/config';
        task generateApplicationConfig {
            description 'Generates the application configuration file'
            def output = file('build/config/' + RAPTURE_CONFIG_DIR + '/RaptureAPPLICATION.cfg')
            outputs.files output
            outputs.upToDateWhen { false }
            doLast {
                def templ = '''
    # Application Configuration
    # Auto generated
    APIVersion=${version}
    '''
                def binding = [ 'version' : project.version ]
                def writable = new SimpleTemplateEngine().createTemplate(templ).make(binding)
                File dir = output.getParentFile()
                dir.mkdirs()
                def destination = new FileWriter(output)
                writable.writeTo(destination)
                destination.flush()
                destination.close()
                println("Created application configuration")
            }
        }

        task copyConfigFiles (type: Copy) {
            dependsOn generateApplicationConfig
            from 'src/main/resources';
            include RAPTURE_CONFIG_DIR + '/*.cfg'
            into 'build/config'
            outputs.upToDateWhen { false }
        }

        task copyWebApplication(type: Copy) {
            dependsOn copyConfigFiles
            from 'src/main/webapp'
            into 'build/webapp'
        }

        jar {
            manifest {
                attributes "Implementation-Vendor" : "Incapture Technologies"
                attributes "Built-By" : System.getProperty('user.name')
            }
        }

        jar.excludes = ['rapture/config']
        task targetConfig {
            outputs.dir file("$buildDir/config")
        }

        applicationDistribution.from(targetConfig) { into "etc" }
    }

    tasks.withType(Zip) { task ->
        task.doLast {
            ant.checksum file: it.archivePath
        }
    }

    dependencies {
        implementation "net.rapture:RaptureAppConfig:$project.platformVersion"
        implementation "net.rapture:RaptureAPI:$project.platformVersion"
        implementation "net.rapture:Reflex:$project.platformVersion"
        implementation libs.log4j
        implementation libs.slf4jJclOver
        implementation libs.slf4jApi
        implementation libs.slf4jLog4j12
        testImplementation libs.junit4
        testImplementation libs.catchException
        testImplementation libs.objenesis
        testImplementation libs.powermockModuleJUnit4
        testImplementation libs.powermockApiEasyMock
        testImplementation libs.easymock
    }

    startScripts {
        // add etc folder to the classpath to pick up cfg files
        if (System.getProperty("os.name").toLowerCase().contains("windows")) {
            classpath = project.files(['%APP_HOME%\\etc'])
        } else {
            classpath = project.files(['$APP_HOME/lib/*', '$APP_HOME/etc'])
        }
        doLast {
            // gradle always puts extra classpaths relative to the lib folder, so we have to replace
            windowsScript.text = windowsScript.text.replace('%APP_HOME%\\lib\\etc', '%APP_HOME%\\lib\\*;%APP_HOME%\\etc')
            unixScript.text = unixScript.text.replace('$APP_HOME/lib/etc', '$APP_HOME/etc')
        }
    }
}
