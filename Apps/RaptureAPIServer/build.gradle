version = '3.0.0'

jar.manifest.attributes "Implementation-Title" : "Rapture APIServer application"
jar.manifest.attributes "Implementation-Version" : version

if (project.getParent().hasProperty('distZipDest') || project.hasProperty('distZipDest')) {
    distZip { destinationDir = file(distZipDest) }
}
tasks.withType(Zip) { task ->
    task.doLast {
        ant.checksum file: it.archivePath
    }
}

applicationDistribution.from(targetConfig) { into "etc" }

startScripts {
    // add etc folder to the classpath to pick up cfg files
    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
        classpath = files(['%APP_HOME%\\etc'])
    } else {
        classpath = files(['$APP_HOME/lib/*', '$APP_HOME/etc'])
    }
    doLast {
        // gradle always puts extra classpaths relative to the lib folder, so we have to replace
        windowsScript.text = windowsScript.text.replace('%APP_HOME%\\lib\\etc', '%APP_HOME%\\lib\\*;%APP_HOME%\\etc')
        unixScript.text = unixScript.text.replace('$APP_HOME/lib/etc', '$APP_HOME/etc')
    }
}

dependencies {
    implementation "net.rapture:WorkflowsCore:$project.platformVersion"
    implementation "net.rapture:RaptureCore:$project.platformVersion"
    implementation "net.rapture:RaptureAddinCore:$project.platformVersion"
    implementation "net.rapture:MongoDb:$project.platformVersion"
    implementation "net.rapture:GoogleCloud:$project.platformVersion"
    implementation "net.rapture:RabbitMQ:$project.platformVersion"
    implementation "net.rapture:ElasticSearch:$project.platformVersion"
    implementation "net.rapture:Postgres:$project.platformVersion"
    implementation "net.rapture:ZooKeeper:$project.platformVersion"
    implementation("net.rapture:Cassandra:$project.platformVersion") {
       exclude module: 'servlet-api'
    }
    implementation "net.rapture:RaptureWebServlet:$project.platformVersion"
    implementation libs.tomcatEmbedLoggingJuli
    implementation libs.tomcatEmbedCore
    implementation libs.tomcatEmbedJasper
    implementation libs.tomcatApi
    implementation libs.tomcatJasper
    implementation libs.tomcatJasperEl
    implementation libs.tomcatJspApi
    implementation libs.tomcatWebsocket
    implementation libs.servletApi
}

mainClassName = "rapture.server.RaptureAPIServer"

// Config files
//

import groovy.text.*
import java.io.*

task copyApiWebApp(type: Copy) {
   dependsOn copyConfigFiles
   from 'src/main/apiwebapp'
   into 'build/apiwebapp'
}

task targetApiWebApp {
    def docs = file("$buildDir/apiwebapp")
    outputs.dir docs
}

compileJava {
    dependsOn copyConfigFiles
    dependsOn copyApiWebApp
}

applicationDistribution.from(targetApiWebApp) {
    into "bin/apiwebapp"
}

startScripts {
       doLast {
             unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=""',
             'DEFAULT_JVM_OPTS="-Xmx1G -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9011 -Dcom.sun.management.jmxremote.rmi.port=9012 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.local.only=false"')
            }
        }
