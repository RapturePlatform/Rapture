version = '3.0.0'

jar.manifest.attributes "Implementation-Title" : "Rapture Integration tests."
jar.manifest.attributes "Implementation-Version" : version

mainClassName = "rapture.test.java"

def nosetestsCmd = System.properties['nosetests'] ?: "nosetests"

dependencies {
    implementation "net.rapture:WorkflowsCore:$project.platformVersion"
    implementation "net.rapture:RaptureCore:$project.platformVersion"
    implementation "net.rapture:RaptureAddinCore:$project.platformVersion"
    implementation "net.rapture:MongoDb:$project.platformVersion"
    implementation "net.rapture:GoogleCloud:$project.platformVersion"
    implementation "net.rapture:RabbitMQ:$project.platformVersion"
    implementation "net.rapture:PluginInstallerLib:$project.platformVersion"
    implementation("net.rapture:Cassandra:$project.platformVersion") {
       exclude module: 'servlet-api'
    }
    testImplementation libs.testng
    testImplementation libs.mail
    testImplementation libs.jsonPatch
}


task nightlyTests (type: Test) {
    description 'Runs TestNG tests in the Java nightly test group.'
    useTestNG(){
      ignoreFailures = true
      useDefaultListeners = true
      jvmArgs '-Xmx2048m', '-XX:MaxPermSize=256m'
      includeGroups 'nightly'
      excludeGroups 'nosearch'

      if(project.hasProperty('env')){
          ext.testngfile = "/src/test/resources/${env}_testng.xml"
       } else {
          ext.testngfile = "/src/test/resources/local_testng.xml"
       }
      suites ext.testngfile
    }
}

task nightlysearchoffTests (type: Test) {
    description 'Runs TestNG tests in the Java nightly test group.'
    useTestNG(){
      ignoreFailures = true
      useDefaultListeners = true
      jvmArgs '-Xmx2048m', '-XX:MaxPermSize=256m'
      includeGroups 'nightly', 'nosearch'
      excludeGroups 'search'

      if(project.hasProperty('env')){
          ext.testngfile = "/src/test/resources/${env}_testng.xml"
       } else {
          ext.testngfile = "/src/test/resources/local_testng.xml"
       }
      suites ext.testngfile
    }
}

task smokeTests (type: Test) {
    description 'Runs TestNG tests in the Java smoke test group.'
    useTestNG(){
      ignoreFailures = true
      useDefaultListeners = true
      jvmArgs '-Xmx2048m', '-XX:MaxPermSize=256m'
      includeGroups 'smoke'

      if(project.hasProperty('env')){
          ext.testngfile = "/src/test/resources/${env}_testng.xml"
       } else {
          ext.testngfile = "/src/test/resources/local_testng.xml"
       }
      suites ext.testngfile
    }
}

task docTests (type: Test) {
    description 'Runs TestNG tests in the Java document test group.'
    useTestNG(){
        useDefaultListeners = true
        ignoreFailures = true
        jvmArgs '-Xmx2048m', '-XX:MaxPermSize=256m'
        includeGroups 'document'

        if(project.hasProperty('env')){
            ext.testngfile = "/src/test/resources/${env}_testng.xml"
        } else {
            ext.testngfile = "/src/test/resources/local_testng.xml"
        }
        suites ext.testngfile
    }

}

task pythonBlobTests(type: Exec) {
    println 'Running blob api tests'
    commandLine nosetestsCmd, 'src/test/python/blobApi.py'
}
task pythonDocTests(type: Exec) {
    println 'Running doc api tests'
    commandLine nosetestsCmd, 'src/test/python/docApi.py'
}
task pythonPluginTests(type: Exec) {
    println 'Running plugin api tests'
    commandLine nosetestsCmd, 'src/test/python/plugin.py'
}
task pythonEntitlementTests(type: Exec) {
    println 'Running entitlement api tests'
    commandLine nosetestsCmd, 'src/test/python/entitlementTests.py'
}
task pythonStructuredTests(type: Exec) {
    println 'Running structured api tests'
    commandLine nosetestsCmd, 'src/test/python/structured.py'
}
task pythonLockTests(type: Exec) {
    println 'Running Lock tests'
    commandLine nosetestsCmd, 'src/test/python/workflowLock.py'
}
task pythonSearchTests(type: Exec) {
    description 'Run Python search tests using nosetests'
    println 'Running Python search tests'
    commandLine nosetestsCmd, 'src/test/python/searchTests.py'
}

task pythonTests(type: Test) {
    dependsOn pythonBlobTests
    dependsOn pythonDocTests
    dependsOn pythonPluginTests
    dependsOn pythonEntitlementTests
    dependsOn pythonStructuredTests
    dependsOn pythonSearchTests
    dependsOn pythonLockTests
    description 'Run Python tests'
    println 'Running Python tests'
}

// This doesn't seem to work
pythonTests.mustRunAfter nightlyTests
pythonSearchTests.mustRunAfter nightlyTests
